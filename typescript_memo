ルール
・抽象的に書かない
・コピペしない
・例文を書く
・文法以外は日本語で書く

型注釈
変数名に型の値を代入すること
const num: number = 123;

パラメーター

オブジェクト
設計書みたいなもの
例文
let user = {
  name: 'tomo',
  age:30,
}; // こちらは変数
例文の中括弧内をオブジェクトと呼ぶ
{
  name: 'tomo',
  age:30,
}; // こちらがオブジェクト

プロパティ
オブジェクトの内の機能名の事
オブジェクト内のキーの事
例文
let user = {
  キー: 値（機能）
}

void型
引数や戻り値がない型のこと
例文
戻り値がない場合
変数(プロパティ, 型) => void;
使用例
interface Human {
  greeting(message: string): void;
}
const human: Human = {
  greeting(message: string) {
    console.log(message);
  }
}; // 出力した戻り値がにvoid型になる
function human( age: number, weight: number ): number {
  return age + weight
}; // こちらだとage + weightの出力（console .log (1+2)など)したらnumber型になる
return文みたいに値を返すと何かしらの型がついてしまう為、値を返さない時はvoidを使用する

typeof

ジェネリクス
型を引数として受け取れる仕組み
例文
function 関数名<T>(引数: <T>): <T> {
  return 引数
}
console.log(関数名<型>(型よって数字、文字列、真偽値など変わる))
function 関数名の後に<T>「TでもUでもよい」を入力することで,出力時に「T」を型に置き換える「console.log(関数名<型>)」ことができる。
型部分に「string」を書くと「console.log(関数名<string>('hello')」型付けされた文字列が出力できる。
型推論も可能
function 関数名<T>(引数: <T>): <T> {
  return 引数
}
console.log(関数名({ プロパティ: 値})); //値に文字列や数字を入れることで型推論される
function 関数名<T>の<T>は<T, U, V>など何個も引数が書けるが出力時に型注釈しないとunkwon型になる。
例文
function 関数名<T, U>(引数: <T>): <T> {
  return 引数
}
console.log(関数名({ プロパティ: 値})); //これだとTの型しか出力されない為、Uはunkwon型なる
console.log(関数名<{ プロパティ: 型 }, 型>({ プロパティ: 値})); //これでUの方も出力される

extends
型パラメーターに制約をつける
例文
function 関数名<T extends { プロパティ: 型}>(引数: <T>): <T> {
  return 引数
}; // Tにextends { プロパティ: 型}つけることで値に型を指定する
console.log(関数名({ プロパティ: 値}));
型パラメーター
例文
{ プロパティ: 型}
パラメーターの値を型に変えたパラメーターの事

keyof
型のエイリアスにオブジェクトのキー（プロパティ）入れると、エイリアスにユニオン型で代入してくれる。
例文
type K(型エイリアス) = keyof { キー1: 型; キー2: 型 }
結果
type K = "キー1" | "キー2"
分からなかった部分
extendsとkeyofの組み合わせ

Utility型
インポートしなくてもtypescriptで内蔵している型のライブラリ
例文
interface 型エイリアス {
  プロパティ1: 型
  プロパティ2: 型
}
type 型の変数 = Partial<型エイリアス>; //PartialはUtility型が内蔵
結果
type 型の変数 = {
    プロパティ1?: 型;
    プロパティ2?: 型;
type 型の変数 = ReadOnly<型エイリアス>; //ReadOnlyはUtility型が内蔵
type 型の変数 = {
    ReadOnly プロパティ1: 型;
    ReadOnly プロパティ2: 型;

MappedTypes
型を繰り返し扱うための文
例文
type Mappedtype = {
  [変数 in '文字列リテラル' | '文字列リテラル2']: 変数
}; // オブジェクト中に構文で書く
結果
: 変数にすると文字列リテラルが繰り返される
type Mappedtype = {
    文字列リテラル: "文字列リテラル";
    文字列リテラル2: "文字列リテラル2";
}
例文
type Mappedtype = {
  [変数 in '文字列リテラル' | '文字列リテラル2']: 型
}; // オブジェクト中に構文で書く
結果
: 型にすると型が繰り返される
type Mappedtype = {
    文字列リテラル: string;
    文字列リテラル2: string;
}



interface
オブジェクトのみの型エイリアス
interface オブジェクト名  {
  プロパティ1: 型;
  プロパティ2: 型;
};
type(型エイリアス)
名前の付いた型のこと
例文
type 変数名 = {
  プロパティ1: 型;
  プロパティ2: 型;
}
変数やオブジェクトが使用できる
const 変数: 変数名かオブジェクト名 = {
  プロパティ1: 値;
  プロパティ2: 値;
}; // 型の検査ができる
この2つの違いは?
変数かオブジェクトかの違い
interfaceは
オブジェクトのみで使用できる
interface オブジェクト名  {
  プロパティ1: 型;
  プロパティ2: 型;
} | string ;// ユニオン型は出来ない
型エイリアスはユニオン型もできる

メソッドをオブジェクト型に指定する
interface オブジェクト名  {
  プロパティ1: 型;
  プロパティ2: 型;
  メソッド名(プロパティ: 型) => 返り値の型
};
const 変数: オブジェクト名  {
  プロパティ1: 型;
  プロパティ2: 型;
  メソッド名(プロパティ3: 型) {
    実行処理の内容
  }
};

構造部分型
例文
interface Human {
  name: string;
  age: number;
  greeting(message: string): void;
}

const tempDeveloper = {
  name: 'Quill',
  age: 38,
  experience: 3,
  greeting(message: string) {
    console.log(message);
  }
}
const user: Human = tempDeveloper
; // パラメーターexperienceが増えてもconst user: Human = tepDeveloperが成立してしまう。
; // この場合はuserのオブジェクトはtempDeveloperになる
  
ReadOnly
指定すると読み込み専用になる
例文
interface Human {
  readonly name: string;
}
user.name = 'aaa'; // interfaceでも型エイリアスでも読み込み専用なのでエラーが発生する

interfaceの継承
新しい型エイリアスを作成して、既存の型エイリアスに機能を追加できる
（その逆もできる）
例文
interfaceの場合
interface オブジェクト名2  {
  プロパティ3: 型;
}
interface オブジェクト名1 extends オブジェクト名2 {
  プロパティ1: 型;
  プロパティ2: 型;
}; // プロパティ3をオブジェクト名1追加した形になる
type(型エイリアス)
名前の付いた型のこと
例文
type 変数名2  = {
  プロパティ3: 型;
}
type 変数名1 extends 変数名2 = {
  プロパティ1: 型;
  プロパティ2: 型;
}; // typeエイリアスはextends使用出来ないのでエラーになる
交差型(&)
型エイリアスで継承を行う時に使用する
例文
type 変数名2  = {
  プロパティ3: 型;
}
type 変数名1 = {
  プロパティ1: 型;
  プロパティ2: 型;
} & 変数名2; // extendsを削除して& 変数名2最後に使用する

型エイリアスで型継承する時に継承先に同じパラメーターがあった場合も同じプロパティで違う型を指定した場合はエラーにならない。
型エイリアスなのでユニオン型になってしまう。
例文
type 変数名2  = {
  プロパティ3: 型;
}
type 変数名1 = {
  プロパティ3: 違う型;
  プロパティ1: 型;
  プロパティ2: 型;
} & 変数名2
結果
プロパティ3 型 | 違う型になる

interfaceで型継承する時に継承先に同じパラメーターがあった場合はエラーが出ない。その代わりに同じプロパティで違う型を指定した場合はエラーになる
例文
OK
interface オブジェクト名2  {
  プロパティ3: 型;
}
interface オブジェクト名1 extends オブジェクト名2 {
  プロパティ3: 型;
  プロパティ1: 型;
  プロパティ2: 型;
};
NG
interface オブジェクト名2  {
  プロパティ3: 型;
}
interface オブジェクト名1 extends オブジェクト名2 {
  プロパティ3: 違う型;
  プロパティ1: 型;
  プロパティ2: 型;
};

？(疑問符)
プロパティの後に？をつけると、そのパラメーターは使用してもしなくてもよい型になる。
例文
type 変数名1 = {
  プロパティ1: 型;
  プロパティ2?: 型;
}

const 変数名3: 変数名1 = {
    プロパティ1: 値;
    プロパティ2: 値; // あってもなくてもよい
}